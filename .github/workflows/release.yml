name: Release KConsole
on:
  push:
    tags:
      - '*.*.*'
env:
  version: '0.1.4'

jobs:
  build-release:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pipenv'

      - name: Install pywin32 and pefile if on Windows
        run: |
          pip install --upgrade pywin32-ctypes
          pip install --upgrade pefile
        if: matrix.os == 'windows-latest'

      - name: Install pipenv
        run: |
          pip install pipenv

      - name: pipenv install
        run: pipenv install --system --dev

      - name: pyinstaller
        run: pyinstaller kconsole.spec

      - name: Archive Windows Release Binaries
        uses: thedoctor0/zip-release@main
        if: matrix.os == 'windows-latest'
        with:
          type: 'zip'
          filename: kconsole-windows-${{ env.version }}.zip
          path: kconsole/
          directory: dist/

      - name: Archive Linux Release Binaries
        uses: thedoctor0/zip-release@main
        if: matrix.os == 'ubuntu-latest'
        with:
          type: 'zip'
          filename: kconsole-linux-${{ env.version }}.zip
          path: kconsole/
          directory: dist/

      - name: Create Windows Installer
        if: matrix.os == 'windows-latest'
        run: iscc.exe kconsole-innosetup.iss

      - name: Push Windows Release
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'windows-latest'
        with:
          files: |
            dist/kconsole-windows-${{ env.version }}.zip
            dist/kconsole-setup.exe

      - name: Push Linux Release
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          files: dist/kconsole-linux-${{ env.version }}.zip
